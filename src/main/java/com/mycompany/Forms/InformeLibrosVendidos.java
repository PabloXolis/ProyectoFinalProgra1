package com.mycompany.Forms;

import com.mycompany.Clases.Libro_Vendido;
import com.mycompany.Clases.Venta;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class InformeLibrosVendidos extends javax.swing.JFrame {
    
    
    public static Venta ventaSelected;
    public java.util.List<Venta> ventasActivas;
    
    public InformeLibrosVendidos(){
        initComponents();
        setLocationRelativeTo(null);
        this.setDefaultCloseOperation(Login.DISPOSE_ON_CLOSE); 
        
        getContentPane().setBackground(new java.awt.Color(0, 0, 0));
        customizeTableHeader();
        
        pintar_tabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        regresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        exportacionACsv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Informe de Libros Vendidos");
        setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Informe de Libros Vendidos");

        regresar.setBackground(new java.awt.Color(0, 0, 0));
        regresar.setForeground(new java.awt.Color(255, 255, 255));
        regresar.setText("Regresar");
        regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(15, 42, 61));
        jScrollPane1.setViewportView(jTable1);

        exportacionACsv.setBackground(new java.awt.Color(0, 0, 0));
        exportacionACsv.setForeground(new java.awt.Color(255, 255, 255));
        exportacionACsv.setText("Exportación de Informe a CSV");
        exportacionACsv.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        exportacionACsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportacionACsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(exportacionACsv, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168)
                .addComponent(regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(226, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportacionACsv, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void pintar_tabla(){
                
            String encabezado [] = {"Libro", "Cantidad", "Precio Total", "Fecha de Venta"};
            
            // Filtrando libros activos
            ventasActivas = new java.util.ArrayList<>();
            for (Venta v : Proyecto_Final_Log_In.ventas) {
                if (v.isActivo()) {
                    ventasActivas.add(v);
                }
            }
            
            // Crear modelo con columnas, pero sin filas
            DefaultTableModel t = new DefaultTableModel(encabezado, 0);
            jTable1.setModel(t);

            TableModel tabla = jTable1.getModel();
            
            SimpleDateFormat formatoFecha = new SimpleDateFormat(
                "EEEE, d 'de' MMMM 'de' yyyy, HH:mm:ss",
                Locale.of("es", "ES")
            ); 
            
            for (Venta v : ventasActivas) {
                String fechaHoraFormateada = formatoFecha.format(v.getFechaYHora().getTime());
                for (Libro_Vendido libroVendido : v.getLibrosVendidos()) {
                    Object[] fila = {libroVendido.getLibro(), libroVendido.getCantidad(), libroVendido.getSubtotal(), fechaHoraFormateada};
                    t.addRow(fila);
                }
            }
        }
    
    private void customizeTableHeader() {
        javax.swing.table.JTableHeader header = jTable1.getTableHeader();
        
        Font headerFont = new Font("Liberation Sans", Font.BOLD, 16);
        header.setPreferredSize(new Dimension(header.getWidth(), 35));
        header.setFont(headerFont);
        header.setBackground(new java.awt.Color(0, 0, 0));  // Color de fondo (RGB)
        header.setForeground(java.awt.Color.WHITE);             // Color del texto
        
        jScrollPane1.getViewport().setBackground(new java.awt.Color(0, 0, 0));
        
        // 3. (Opcional) Forzar repintado
        header.repaint();
    }
    
    private void regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_regresarActionPerformed

    private String obtenerRuta(){
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int resultado = fileChooser.showOpenDialog(null);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File carpeta = fileChooser.getSelectedFile();
            return carpeta.getAbsolutePath() + File.separator + "Informe de Libros Vendidos.csv";
        } else {
            return null;
        }
    }
    
    private void exportacionACsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportacionACsvActionPerformed
        
        String ruta = obtenerRuta();
        
        if (ruta == null) {
            JOptionPane.showMessageDialog(null, "Exportación cancelada.");
            return;
        }
        
        try (PrintWriter escribir = new PrintWriter(new FileWriter(ruta))){
            StringBuilder contenido = new StringBuilder();
            
            contenido.append("Libro, Cantidad, Precio Total, Fecha de Venta,\n");
            
            SimpleDateFormat formatoFecha = new SimpleDateFormat(
                "EEEE, d 'de' MMMM 'de' yyyy, HH:mm:ss",
                Locale.of("es", "ES")
            ); 
            
            for (Venta ventaActiva : ventasActivas) {
                String fechaHoraFormateada = formatoFecha.format(ventaActiva.getFechaYHora().getTime());
                fechaHoraFormateada = fechaHoraFormateada.replace(",", "");
                for (Libro_Vendido libroVendido : ventaActiva.getLibrosVendidos()) {
                    contenido.append(libroVendido.getLibro())
                    .append(", ")
                    .append(libroVendido.getCantidad())
                    .append(", ")
                    .append(libroVendido.getSubtotal())
                    .append(", ")
                    .append(fechaHoraFormateada)
                    .append("\n");
                }
            }
            escribir.write(contenido.toString());
            JOptionPane.showMessageDialog(null, "Exportación de Informe de Libros Vendidos a CSV hecha con éxito en: \n" + ruta);
            
        } catch (IOException ex) {
            Logger.getLogger(InformeLibrosVendidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportacionACsvActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportacionACsv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton regresar;
    // End of variables declaration//GEN-END:variables
}
