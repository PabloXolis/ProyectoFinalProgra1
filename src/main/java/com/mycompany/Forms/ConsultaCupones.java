package com.mycompany.Forms;

import com.mycompany.Clases.Cupon;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ConsultaCupones extends javax.swing.JFrame {

    private Cupon cupon;
    private java.util.List<Cupon> cuponesActivos;
    
    public ConsultaCupones() {
        initComponents();
        setLocationRelativeTo(null);
        pintar_tabla();
        
        jComboBox1.removeAllItems(); // Inicializando el JcomboBox
        jComboBox1.addItem("Pocentaje");
        jComboBox1.addItem("Monto Fijo");
        
        this.setDefaultCloseOperation(Login.DISPOSE_ON_CLOSE); // Para evitar que al dar en la equis, se cierre el form principal.
    }
    
    private void pintar_tabla(){
                
        String encabezado [] = {"Código", "Tipo", "Valor de Descuento", "Fecha de Expira"};
        
        // Filtrando cupones activos
        cuponesActivos = new java.util.ArrayList<>();
        for (Cupon c : Proyecto_Final_Log_In.cupones) {
            if (c.isActivo()) {
                cuponesActivos.add(c);
            }
        }
        
        
        // Crear modelo con columnas, pero sin filas
        DefaultTableModel t = new DefaultTableModel(encabezado, 0);
        jTable1.setModel(t);
        
        TableModel tabla = jTable1.getModel();
        
        for (Cupon c : cuponesActivos) {
            Object[] fila = {c.getCodigo(), c.getTipo(), c.getValor_descuento(), c.getExpira()};
            t.addRow(fila);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Cerrar = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        Guardar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        CargaMasiva1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consulta de Cupones");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Cerrar.setText("Cerrar");
        Cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarActionPerformed(evt);
            }
        });

        Borrar.setText("Borrar");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo:");

        jLabel2.setText("Código:");

        jLabel3.setText("Valor de Descuento:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha de Expiración:");

        CargaMasiva1.setText("Carga Masiva");
        CargaMasiva1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargaMasiva1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addGap(23, 23, 23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(Borrar)
                                .addGap(49, 49, 49)
                                .addComponent(Modificar)
                                .addGap(54, 54, 54)
                                .addComponent(CargaMasiva1)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Cerrar)
                            .addComponent(Guardar))
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Borrar)
                    .addComponent(Cerrar)
                    .addComponent(Modificar)
                    .addComponent(CargaMasiva1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Guardar)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_CerrarActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        
        int eliminar = jTable1.getSelectedRow();
        
        if(eliminar >= 0){
            if(JOptionPane.showConfirmDialog(this, "¿Estás seguro que deseas eliminar el cupón seleccionado?") == 0){
                
                cupon = cuponesActivos.get(eliminar);
                //Proyecto_Final_Log_In.cupones.remove(eliminar);  Ya no se elmina de la lista de objetos de tipo Cupon.
                cupon.setActivo(false);
                pintar_tabla();
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Selecciona un cupón válido para eliminar.");
        }
    }//GEN-LAST:event_BorrarActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
 
        if(jTable1.getSelectedRow() >= 0 ){
            cupon = cuponesActivos.get(jTable1.getSelectedRow());
            jTextField1.setText(cupon.getCodigo());
            jTextField2.setText(String.valueOf(cupon.getValor_descuento()));
            jTextField3.setText(cupon.getExpira());
            
            if(cupon.getTipo().equals("Porcentaje")){
                jComboBox1.setSelectedIndex(0);
            }
            else{
                jComboBox1.setSelectedIndex(1);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Selecciona un cupón válido para modificar.");
        }     
    }//GEN-LAST:event_ModificarActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        
        if (cupon != null) {
            
            if (jTextField1.getText().isEmpty() || jTextField2.getText().isEmpty() || jTextField3.getText().isEmpty()) {
                throw new IllegalArgumentException("Los campos no pueden estar vacíos.");
            }else{
                try{
                    try{
                        String code = jTextField1.getText();
                        boolean validExistente = false;
                        boolean validLength = true;
                        boolean validNumber = false;
                        boolean minuscula = false;

                        for(Cupon c : Proyecto_Final_Log_In.cupones){
                            if(code.equals(cupon.getCodigo())){
                                validExistente = false;
                            }
                            else if(code.equals(c.getCodigo())){
                                validExistente = true;
                                JOptionPane.showMessageDialog(this, "Error: Ingresaste un código ya existente.");
                            }
                        }

                        if(code.length() < 5){
                            validLength = false;
                            JOptionPane.showMessageDialog(this, "Error: El código ingresado tiene que ser mayor a 5 caracteres.");
                        }

                        for(int i = 0; i < code.length(); i++){
                            int ascii = (int) code.charAt(i);

                            if(ascii >= 48 && ascii <= 57){ // Rango ASCII de los dígitos.
                                validNumber = true;
                            }
                        }
                        if(!validNumber){
                            JOptionPane.showMessageDialog(this, "Error: El código ingresado debe poser al menos un número.");
                        }

                        for(int i = 0; i < code.length(); i++){
                            int ascii = (int) code.charAt(i);

                            if(ascii >= 97 && ascii <= 122){ // Rango ASCII de las minusculas.
                                minuscula = true;
                            }
                        }
                        if(minuscula){
                            JOptionPane.showMessageDialog(this, "El código ingresado no debe poseer minúsculas.");
                        }

                        if((validExistente == false)&&(validLength == true)&&(validNumber == true)&&(minuscula == false)){
                            
                            String tipo_descuento = jComboBox1.getSelectedItem().toString();
                            double valor_descuento = Double.parseDouble(jTextField2.getText());
                            String fecha = jTextField3.getText();
                            Date fechaParseada = null;

                            SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
                            sdf1.setLenient(false);
                            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
                            sdf2.setLenient(false);

                            try {
                                if (sdf1.parse(fecha) != null) {
                                    fechaParseada = sdf1.parse(fecha);
                                }

                            } catch (ParseException ex) {

                            }

                            try {
                                if (sdf2.parse(fecha) != null) {
                                    fechaParseada = sdf2.parse(fecha);
                                }
                            } catch (ParseException ex) {

                            }

                            if (fechaParseada == null) {
                                JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Usa dd/MM/yyyy o dd-MM-yyyy");
                                return;
                            }
                            
                            if(tipo_descuento.equals("Porcentaje")){
                                if (valor_descuento > 0) {
                                    cupon.setCodigo(code);
                                    cupon.setTipo(tipo_descuento);
                                    cupon.setValor_descuento(valor_descuento);
                                    cupon.setActivo(true);
                                    cupon.setExpira(fecha);

                                    JOptionPane.showMessageDialog(this, "Cupón modificado con éxito.");
                                }
                                else{
                                    JOptionPane.showMessageDialog(this, "El descuento debe ser mayor a 0.");
                                }
                            }
                            else{
                                if (valor_descuento > 0) {
                                    cupon.setCodigo(code);
                                    cupon.setTipo(tipo_descuento);
                                    cupon.setValor_descuento(valor_descuento);
                                    cupon.setActivo(true);
                                    cupon.setExpira(fecha);

                                    JOptionPane.showMessageDialog(this, "Cupón modificado con éxito.");
                                }
                                else{
                                    JOptionPane.showMessageDialog(this, "El descuento debe ser mayor a 0 quetzales");
                                }
                            }

                            pintar_tabla();
                        }
                        
                        
                    }
                    catch(HeadlessException e){
                        JOptionPane.showMessageDialog(this, "Error: " + e);
                    }
                }
                catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private String obtenerRuta(){
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos CSV (*.csv)", "csv");
        
        fileChooser.setFileFilter(filtro);
        
        fileChooser.showOpenDialog(null);
        File archivo = fileChooser.getSelectedFile();
        
       int respuesta = JOptionPane.showConfirmDialog(null, "¿Desea  cargar el archivo: \"" + archivo.getAbsolutePath() + "\"?", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
        
       if (respuesta == JOptionPane.YES_OPTION) {
            return archivo.getAbsolutePath();
        } else {
            JOptionPane.showMessageDialog(
                null,
                "Selección cancelada.",
                "Cancelado",
                JOptionPane.WARNING_MESSAGE
            );
        } 
       
        return null;
    }
    
    private void leer(String ruta){
        
        try {
            File archivo = new File(ruta);
            FileReader leer;
            leer = new FileReader(archivo);
            BufferedReader bloque = new BufferedReader(leer);
            String linea = bloque.readLine();
            linea = bloque.readLine(); // Se salta el encabezado y comienza a leer desde la segunda líneí
            
            while (linea != null) {
                String[] datosSeparadosCupon = linea.split("\\|");
                
                if (datosSeparadosCupon.length < 4) {
                    linea = bloque.readLine(); // Saltar línea malformada
                    continue;
                }
                
                Cupon c = new Cupon();
                
                c.setCodigo(datosSeparadosCupon[0]);
                c.setValor_descuento(Double.parseDouble(datosSeparadosCupon[1]));
                
                if (datosSeparadosCupon[2].equalsIgnoreCase("Porcentaje")){
                    c.setTipo("Porcentaje");
                }
                else{
                    c.setTipo("Monto");
                }
                
                
                String fecha = datosSeparadosCupon[3];
                Date fechaParseada = null;

                // Definiendo los formatos aceptados
                SimpleDateFormat[] formatos = {
                    new SimpleDateFormat("dd/MM/yyyy"), new SimpleDateFormat("dd-MM-yyyy"), 
                    new SimpleDateFormat("yyyy/MM/dd"), new SimpleDateFormat("yyyy-MM-dd")
                };

                SimpleDateFormat formatoVisible = new SimpleDateFormat("dd/MM/yyyy");

                for(SimpleDateFormat formato : formatos) {
                    formato.setLenient(false);
                }

                // Prueba cada formato hasta encontrar uno válido
                for(SimpleDateFormat formato : formatos) {
                    try {
                        fechaParseada = formato.parse(fecha);
                        break; // Si llega aquí, el formato es correcto
                    } catch (ParseException e) {
                        // Continua con el siguiente formato
                    }
                }

                if (fechaParseada == null) {
                    linea = bloque.readLine(); // Preparando la próxima línea.
                    continue;
                }

                String fechaFormateada = formatoVisible.format(fechaParseada);
                
                c.setExpira(fechaFormateada);
                c.setActivo(true);
                
                Proyecto_Final_Log_In.cupones.add(c);
                
                linea = bloque.readLine(); // Preparando la próxima línea.
            }
            
            leer.close();
            JOptionPane.showMessageDialog(this, "Carga Masiva de Cupones exitosa.");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Cupon_Nuevo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Cupon_Nuevo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void CargaMasiva1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargaMasiva1ActionPerformed
        String ruta = obtenerRuta();
        leer(ruta);
        pintar_tabla();
    }//GEN-LAST:event_CargaMasiva1ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar;
    private javax.swing.JButton CargaMasiva1;
    private javax.swing.JButton Cerrar;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Modificar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}